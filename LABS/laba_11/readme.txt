–ó–∞–¥–∞–Ω–∏–µ
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞–≤–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Ä—É–±–ª—é. –í–∞–ª—é—Ç–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º. –î–∞—Ç–∞ –≤–≤–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º 2 —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç

–†–µ–∞–ª–∏–∑–∞—Ü–∏—è
–ù–∞–ø–∏—à–µ–º –∫–æ–¥ –±–æ—Ç–∞ —Å –º–µ–Ω—é –Ω–∞ –ø–∏—Ç–æ–Ω–µ, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∏—Ç—å –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –º–µ–Ω—é –≤–∞–ª—é—Ç—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É.
–í—ã–±–µ—Ä–µ–º 3 –≤–∞–ª—é—Ç—ã: –¥–æ–ª–ª–∞—Ä, –µ–≤—Ä–æ, –∫–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å –∏ —Ä–µ–∞–ª–∏–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç—ã, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–ø–∏—à–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ —Å–ª—É—á–∞–µ –≤–≤–æ–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç—ã.

–ö–æ–¥
import xml.dom.minidom
import requests
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from io import BytesIO
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ConversationHandler, Application, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN = "7989595985:AAHhbo2Uww5ZGna8H0dDmOYR4n8QFu-7yoQ"
CBR_URL = "https://www.cbr.ru/scripts/XML_daily.asp?date_req="
CURRENCIES = {
    'USD': '–î–æ–ª–ª–∞—Ä –°–®–ê',
    'EUR': '–ï–≤—Ä–æ',
    'CNY': '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å'
}

SELECT_CURRENCY, SELECT_START_DATE, SELECT_END_DATE = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[currency] for currency in CURRENCIES.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¶–ë –†–§.\n"
        "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:",
        reply_markup=reply_markup
    )
    return SELECT_CURRENCY

async def select_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text not in CURRENCIES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return SELECT_CURRENCY
    
    context.user_data['currency'] = text
    await update.message.reply_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {CURRENCIES[text]}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    return SELECT_START_DATE

async def select_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        date = datetime.strptime(text, "%d.%m.%Y").date()
        if date > datetime.now().date():
            await update.message.reply_text("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return SELECT_START_DATE
            
        context.user_data['start_date'] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return SELECT_END_DATE
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return SELECT_START_DATE

async def select_end_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        start_date = datetime.strptime(context.user_data['start_date'], "%d.%m.%Y").date()
        end_date = datetime.strptime(text, "%d.%m.%Y").date()
        
        if end_date < start_date:
            await update.message.reply_text("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return SELECT_END_DATE
        if end_date > datetime.now().date():
            await update.message.reply_text("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return SELECT_END_DATE
            
        if (end_date - start_date).days > 365:
            await update.message.reply_text("–ü–µ—Ä–∏–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 1 –≥–æ–¥. –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–∏–π –ø–µ—Ä–∏–æ–¥:")
            return SELECT_END_DATE
            
        context.user_data['end_date'] = text
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        currency = context.user_data['currency']
        start_date_str = context.user_data['start_date']
        end_date_str = context.user_data['end_date']
        dates, rates = get_currency_rates_for_period(currency, start_date_str, end_date_str)
        
        if not dates:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.")
            return await start(update, context)
            
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(12, 6))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        line, = plt.plot(dates, rates, marker='o', linestyle='-', 
                        color='#2ecc71', linewidth=2, markersize=6,
                        markerfacecolor='#e74c3c', markeredgecolor='#c0392b')
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π
        min_rate = min(rates)
        max_rate = max(rates)
        min_date = dates[rates.index(min_rate)]
        max_date = dates[rates.index(max_rate)]
        
        plt.scatter([min_date, max_date], [min_rate, max_rate], 
                   color=['#3498db', '#e74c3c'], s=100, zorder=5)
        
        # –ü–æ–¥–ø–∏—Å–∏ –∫ —Ç–æ—á–∫–∞–º
        plt.annotate(f'{min_rate:.2f}', xy=(min_date, min_rate), xytext=(5, 5),
                    textcoords='offset points', color='#3498db', fontsize=10)
        plt.annotate(f'{max_rate:.2f}', xy=(max_date, max_rate), xytext=(5, 5),
                    textcoords='offset points', color='#e74c3c', fontsize=10)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
        plt.fill_between(dates, rates, alpha=0.1, color='#2ecc71')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        plt.title(f"–î–∏–Ω–∞–º–∏–∫–∞ –∫—É—Ä—Å–∞ {CURRENCIES[currency]}\n{start_date_str} - {end_date_str}", 
                 fontsize=14, pad=20, color='#34495e')
        plt.xlabel("–î–∞—Ç–∞", fontsize=12, color='#34495e')
        plt.ylabel("–ö—É—Ä—Å, —Ä—É–±.", fontsize=12, color='#34495e')
        
        # –°–µ—Ç–∫–∞ –∏ —Ñ–æ–Ω
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.gca().set_facecolor('#f9f9f9')
        
        # –û—Å–∏
        plt.gca().spines['top'].set_visible(False)
        plt.gca().spines['right'].set_visible(False)
        plt.gca().spines['left'].set_color('#bdc3c7')
        plt.gca().spines['bottom'].set_color('#bdc3c7')
        
        # –§–æ—Ä–º–∞—Ç –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
        plt.gcf().autofmt_xdate()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é
        mean_rate = sum(rates)/len(rates)
        plt.axhline(y=mean_rate, color='#9b59b6', linestyle='--', linewidth=1, alpha=0.7)
        plt.annotate(f'–°—Ä–µ–¥–Ω–µ–µ: {mean_rate:.2f}', xy=(dates[-1], mean_rate), 
                    xytext=(5, 5), textcoords='offset points',
                    color='#9b59b6', fontsize=9)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        buf = BytesIO()
        plt.savefig(buf, format='png', dpi=120, bbox_inches='tight', facecolor=plt.gcf().get_facecolor())
        buf.seek(0)
        plt.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await update.message.reply_photo(
            photo=buf,
            caption=f"üìà –ö—É—Ä—Å {CURRENCIES[currency]}:\n"
                   f"‚û° –ù–∞—á–∞–ª–æ: {start_date_str}\n"
                   f"‚û° –ö–æ–Ω–µ—Ü: {end_date_str}\n"
                   f"üìä –ú–∏–Ω–∏–º—É–º: {min_rate:.2f}\n"
                   f"üìà –ú–∞–∫—Å–∏–º—É–º: {max_rate:.2f}\n"
                   f"üßÆ –°—Ä–µ–¥–Ω–µ–µ: {mean_rate:.2f}"
        )
        
        return await start(update, context)
        
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return SELECT_END_DATE

def get_currency_rate(currency_code: str, date: str) -> float:
    try:
        response = requests.get(f"{CBR_URL}{date}")
        if response.status_code != 200:
            return None
        
        dom = xml.dom.minidom.parseString(response.text)
        dom.normalize()
        
        valutes = dom.getElementsByTagName("Valute")
        
        for valute in valutes:
            char_code = valute.getElementsByTagName("CharCode")[0]
            if char_code.firstChild.nodeValue == currency_code:
                value = valute.getElementsByTagName("Value")[0].firstChild.nodeValue
                nominal = valute.getElementsByTagName("Nominal")[0].firstChild.nodeValue
                return float(value.replace(',', '.')) / float(nominal)
                
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return None

def get_currency_rates_for_period(currency_code: str, start_date: str, end_date: str):
    start = datetime.strptime(start_date, "%d.%m.%Y").date()
    end = datetime.strptime(end_date, "%d.%m.%Y").date()
    
    dates = []
    rates = []
    
    current_date = start
    while current_date <= end:
        date_str = current_date.strftime("%d.%m.%Y")
        rate = get_currency_rate(currency_code, date_str)
        
        if rate is not None:
            dates.append(current_date)
            rates.append(rate)
        
        current_date += timedelta(days=1)
    
    return dates, rates

def main():
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_CURRENCY: [
                MessageHandler(filters.Regex(f"^({'|'.join(CURRENCIES.keys())})$"), select_currency)
            ],
            SELECT_START_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_start_date)
            ],
            SELECT_END_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_end_date)
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
